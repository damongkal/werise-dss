<?php

class oryza2000_api
{
    private $station;
    private $year;
    private $fert;
    private $wtype;
    private $variety;

    /**
     * number of months to process
     * 12 is default. we set to 9 if next year data is not available
     * @var type
     */
    private $sttime_limit = 12;

    // output variables
    private $datasets = false;
    private $filekey;

    private $debug;

    public function exec($dataset, $variety, $fert, $wtype)
    {
        $this->debug = debug::getInstance();
        set_time_limit(600);

        // check weather file requirements
        $this->checkWeatherRequirements($dataset, $wtype);

        // initialize dataset variables
        $wstation = new weather_stations;
        $this->station = $wstation->getStation($dataset['country'], $dataset['station']);
        $this->year = intval($dataset['year']);
        $this->fert = intval($fert);
        $this->wtype = $wtype;
        $this->variety = $variety;

        // get country specific CONTROL.DAT
        $folder_cfg = werise_stations_country::getAll();
        $country_folder = 'config-'.$folder_cfg[$this->station->country_code]['dir'];
        $control = file_get_contents( _DATA_SUBDIR_ORYZA . $country_folder . DIRECTORY_SEPARATOR .'CONTROL.DAT');
        file_put_contents(_DATA_SUBDIR_ORYZA . 'CONTROL.DAT', $control);

        // prepare RERUNs.DAT
        $this->datasets = $this->EditRerun();
        if (!$this->datasets)
        {
            throw new Exception('No dataset detected in rerun file');
        }

        // remove previous output of op.dat
        file_put_contents( _DATA_SUBDIR_ORYZA . 'op.dat', '');
        // run ORYZA2000
        $exefile = _DATA_SUBDIR_ORYZA . 'oryza.bat';
        $this->debug->addLog('EXEFILE: '.$exefile,false,'ORYZA');
        exec($exefile);
        // check if output exist
        $opdatfile = _DATA_SUBDIR_ORYZA . 'op.dat';
        $this->debug->addLog('OPTFILE: '.$opdatfile,false,'ORYZA');
        if (file_exists($opdatfile)==false)
        {
            throw new Exception('opt.dat file is missing! No output generated by Oryza2000.');
        } else
        {
            $op_size = filesize($opdatfile);
            if ($op_size==0)
            {
                throw new Exception('opt.dat file is empty! No output generated by Oryza2000.');
            }
        }
        // save the output file
        $this->saveOutput();
        return true;
    }

    /**
     * edit RERUN-BASIC-SET.DAT template according to parameters
     */
    private function EditRerun() {
        $template_set = $this->getRerunTemplate();

        // fert application reference
        $fertcls = new advisory_fertilizer;
        $fert_apply = $fertcls->getRainDates($this->station, $this->year, $this->wtype, $this->fert);
        $this->debug->addLog($fert_apply, true);

        $datasets = array();
        $template_edit = '';
        $runnum = 1;

        $template_ = $template_set;
        $template = str_replace('{filei1}', $this->variety, $template_);

        $reruns = '';
        $sttimes = array();
        $ferts = array();
        foreach ($this->getSTTime() as $j) {
            $sttimes[$runnum] = $j;

            // determine fert sched
            $fertil_arr = $this->getFertSched($j, $this->variety, $runnum, $fert_apply);
            $fertil = $this->getFertFormat($fertil_arr);
            $ferts[$runnum] = $fertil_arr;

            // RERUN template replace
            $tmp = $template;
            $tmp2 = str_replace(array('{runnum}', '{sttime}', '{fertil}'), array($runnum, $j, $fertil), $tmp);
            $reruns .= $tmp2;

            $runnum++;
        }

        // compile all datasets
        $datasets[] = array(
            'country' => $this->station->country_code,
            'station' => $this->station->station_id,
            'year' => $this->year,
            'wtype' => $this->wtype,
            'variety' => $this->variety,
            'fert' => $this->fert,
            'sttimes' => $sttimes,
            'ferts' => $ferts
        );

        // compile all reruns
        $template_edit = $template_edit . $reruns;

        file_put_contents(_DATA_SUBDIR_ORYZA . 'RERUNS.DAT', $template_edit);
        return $datasets;
    }

    /**
     * open and initialize rerun template
     * @return string
     */
    private function getRerunTemplate()
    {
        // folder config
        $folder_cfg = werise_stations_country::getAll();
        $country_folder = $folder_cfg[$this->station->country_code]['dir'];
        $country_file = $folder_cfg[$this->station->country_code]['file'];

        $subdir = _DATA_DIR . werise_weather_file::getFolder($this->wtype);
        $wtrdir = str_replace('/', '\\', $subdir . $country_folder);

        $template_set_ = $this->getRerunBasic();
        // general text replace
        $nitroenv = _opt(sysoptions::_ORYZA_NITROENV_GENFERT);
        switch($this->fert)
        {
            case advisory_fertilizer::_FERT_NONE:
                $nitroenv = _opt(sysoptions::_ORYZA_NITROENV_NOFERT);
                break;
            case advisory_fertilizer::_FERT_GEN:
                $nitroenv = _opt(sysoptions::_ORYZA_NITROENV_GENFERT);
                break;
            case advisory_fertilizer::_FERT_SPC:
                $nitroenv = _opt(sysoptions::_ORYZA_NITROENV_SPCFERT);
                break;
        }
        $replace = array(
            $this->year,
            $wtrdir,
            $country_file,
            $this->station->station_id,
            $nitroenv);

        return str_replace(array('{iyear}','{wtrdir}','{cntr}','{istn}','{nitroenv}'),$replace, $template_set_);
    }

    private function getFertSched($j, $variety, $runnum, $fert_apply) {
        $fertcls = new fertilizer_application;
        $fertil_arr = null;

        $sowdate = DateTime::createFromFormat('Y-m-d', ($this->year - 1) . '-12-31');
        $sowdate->add(new DateInterval("P{$j}D"));

        $force_fert_gen = false;
        if ($this->fert === advisory_fertilizer::_FERT_SPC) {
            $force_fert_gen = true;
            $oryza_data = new oryza_data;
            $yld = $oryza_data->getYield($this->station, $this->year, $this->wtype, 1, $variety, array('runnum'=>$runnum));
            if ($yld) {
                $fertil_ = $fertcls->getFertSched(advisory_fertilizer::_FERT_SPC, null, $variety, $yld->yield);
                $fertil_arr = $fertcls->adjustFertil($fertil_, $sowdate, $fert_apply);
                $force_fert_gen = false;
            }
        }

        if ($this->fert === advisory_fertilizer::_FERT_GEN || $force_fert_gen === TRUE) {
            $fertil_ = $fertcls->getFertSched(advisory_fertilizer::_FERT_GEN, $this->station, null, null);
            $fertil_arr = $fertcls->adjustFertil($fertil_, $sowdate, $fert_apply);
        }

        return $fertil_arr;
    }

    private function getFertFormat($f = null)
    {
        if (is_null($f))
        {
            return "0.,   0., \r
366., 0.";
        }

        return "0.,     0.,\r
".($f[0]-1).".,    0.,\r
{$f[0]}.,   {$f[1]}.,\r
".($f[0]+1).".,    0.,\r
".($f[2]-1).".,    0.,\r
{$f[2]}.,   {$f[3]}.,\r
".($f[2]+1).".,    0.,\r
".($f[4]-1).".,    0.,\r
{$f[4]}.,   {$f[5]}.,\r
".($f[4]+1).".,    0.,\r
366.,   0.";
    }

    private function getSTTime()
    {
        $ret = array();
        $refdate = DateTime::createFromFormat('Y-m-d', ($this->year-1).'-12-31');
        for($month=1; $month<=$this->sttime_limit;$month++)
        {
            $day1date = DateTime::createFromFormat('Y-m-d', $this->year.'-'.$month.'-01');
            $diff = $refdate->diff($day1date);
            $ret[] = $diff->format('%a');

            $day15date = DateTime::createFromFormat('Y-m-d', $this->year.'-'.$month.'-15');
            $diff2 = $refdate->diff($day15date);
            $ret[] = $diff2->format('%a');
        }
        return $ret;
    }

    public static function getModelOutput()
    {
        return file_get_contents(_DATA_SUBDIR_ORYZA . 'model.log');
    }
    
    private function getOutputDir() {
        return _APP_DIR . '..'.DIRECTORY_SEPARATOR.'logs'.DIRECTORY_SEPARATOR.'oryza' . _opt(sysoptions::_ORYZA_VERSION) . DIRECTORY_SEPARATOR;        
    }

    public function getOpFileName()
    {
        return $this->getOutputDir().$this->filekey .'-op.dat';
    }

    public function getResFileName()
    {
        return $this->getOutputDir().$this->filekey .'-res.dat';
    }

    private function saveOutput()
    {
        $this->filekey = date('YmdHis');

        $subdir = $this->getOutputDir();
        
        // save RERUNS.DAT
        $rerun =  _DATA_SUBDIR_ORYZA . 'RERUNS.DAT';
        $rerun2 = $subdir . $this->filekey .'-RERUNS.DAT';
        if (!copy($rerun, $rerun2)) {
            throw new Exception("failed to save {$rerun2}");
        }
        // save op.dat
        $op =  _DATA_SUBDIR_ORYZA . 'op.dat';
        $op2 = $subdir . $this->filekey .'-op.dat';
        if (!copy($op, $op2)) {
            throw new Exception("failed to save {$op2}");
        }
        // save res.dat
        $res =  _DATA_SUBDIR_ORYZA . 'res.dat';
        $res2 = $subdir . $this->filekey .'-res.dat';
        if (!copy($res, $res2)) {
            throw new Exception("failed to save {$res2}");
        }
    }

    public function getFileKey()
    {
        return $this->filekey;
    }

    public function getDatasets()
    {
        return $this->datasets;
    }

    /**
     * check if weather file is good for simulation
     * @param array $dataset
     * @param type $wtype
     * @return type
     */
    private function checkWeatherRequirements($dataset, $wtype)
    {
        $weather = new weather_data;

        // is next year available ?
        $nextyear = $dataset;
        $nextyear['year'] = $nextyear['year']+1;
        $is_next_year_avail = $weather->getDatasets($nextyear, $wtype);

        // simulate 8 months only
        if ($is_next_year_avail===false)
        {
            $this->sttime_limit = 8;
        }

        // check for missing data.
        /*
        $ret = $weather->checkMissing($dataset, $wtype);
        if ($ret!==false)
        {
            throw new Exception($ret);
        }
        if ($is_next_year_avail!==false)
        {
            $ret2 = $weather->checkMissing($nextyear, $wtype);
            if ($ret2!==false)
            {
                throw new Exception($ret2);
            }
        }*/
    }

    private function getRerunBasic()
    {
        $str = <<<RERUN
!run {runnum} \r
IYEAR = {iyear} \r
WTRDIR = '{wtrdir}' \r
CNTR = '{cntr}' \r
STTIME = {sttime}. \r
ISTN = {istn} \r
FILEI1 = '{filei1}' \r
NITROENV = '{nitroenv}' \r
FERTIL =  \r
{fertil}
RERUN;
        return trim ($str) . "\r\r";
    }

    public static function getVariableIndex($outfile, $vars, $colsref = null)
    {
        $ver = _opt(sysoptions::_ORYZA_VERSION);
        if ($outfile==='op.dat')
        {
            $ref = array('RUNNUM'=>0,'WRR14'=>1);
            if ($ver==='3')
            {
                $ref = array('RUNNUM'=>0,'WRR14'=>4);
            }
        }
        if ($outfile==='res.dat fert0')
        {
            $ref = array(
                'TIME'=>0,
                'DVS'=>2,
                'ZW'=>38,
                'DOY'=>87);
            if ($ver==='3')
            {
                $ref = array(
                    'TIME'=>0,
                    'DVS'=>2,
                    'ZW'=>38,
                    'DOY'=>55);
            }
        }
        if ($outfile==='res.dat fert1')
        {
            $ref = array(
                'TIME'=>0,
                'DVS'=>1,
                'ZW'=>24,
                'DOY'=>73);
            if ($ver==='3')
            {
                $ref = array(
                    'TIME'=>0,
                    'DVS'=>2,
                    'ZW'=>38,
                    'DOY'=>55);
            }
        }

        $col_idx = array();
        foreach ($vars as $col)
        {
            if (isset($colsref[$col]))
            {
                $col_idx[$col] = $colsref[$col];
                continue;
            }
            if (isset($ref[$col]))
            {
                $col_idx[$col] = $ref[$col];
                continue;
            }
            throw new Exception("No index for {$col} in {$outfile}");
        }
        return $col_idx;
    }
}